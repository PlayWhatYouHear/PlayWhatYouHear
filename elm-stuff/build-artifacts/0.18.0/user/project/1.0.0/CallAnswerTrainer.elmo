var _user$project$CallAnswerTrainer$materialButton = F3(
	function (text, click, styles) {
		var $class = _elm_lang$html$Html_Attributes$class;
		return A2(
			_elm_lang$html$Html$button,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Events$onClick(click),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						A2(
							_elm_lang$core$Basics_ops['++'],
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'font-size', _1: '2em'},
								_1: {ctor: '[]'}
							},
							styles)),
					_1: {
						ctor: '::',
						_0: $class('btn'),
						_1: {
							ctor: '::',
							_0: $class('blue'),
							_1: {ctor: '[]'}
						}
					}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(text),
				_1: {ctor: '[]'}
			});
	});
var _user$project$CallAnswerTrainer$meter = function (progressOutOf400) {
	return A2(
		_elm_lang$svg$Svg$svg,
		{
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('400'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$height('20'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'display', _1: 'block'},
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$line,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$x1('0'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$y1('10'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$x2('400'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$y2('10'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$stroke('#FFFFFF'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$strokeWidth('5'),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$line,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$x1('0'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$y1('10'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$x2(
									_elm_lang$core$Basics$toString(progressOutOf400)),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$y2('10'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$stroke('#22DD22'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$strokeWidth('5'),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$line,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$x1('0'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$y1('13'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$x2('400'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$y2('13'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$stroke('#555555'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$strokeWidth('2'),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$CallAnswerTrainer$title = A2(
	_elm_lang$html$Html$h1,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$style(
			{ctor: '[]'}),
		_1: {ctor: '[]'}
	},
	{
		ctor: '::',
		_0: _elm_lang$html$Html$text('Play What You Hear'),
		_1: {ctor: '[]'}
	});
var _user$project$CallAnswerTrainer$bodyStyle = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
		_1: {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'position', _1: 'absolute'},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'top', _1: '0px'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'left', _1: '0px'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'height', _1: 'calc(100vh)'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'font-family', _1: 'sans-serif'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		}
	});
var _user$project$CallAnswerTrainer$playMelody = _elm_lang$core$Native_Platform.outgoingPort(
	'playMelody',
	function (v) {
		return _elm_lang$core$Native_List.toArray(v).map(
			function (v) {
				return {midiNumber: v.midiNumber};
			});
	});
var _user$project$CallAnswerTrainer$stopMelody = _elm_lang$core$Native_Platform.outgoingPort(
	'stopMelody',
	function (v) {
		return null;
	});
var _user$project$CallAnswerTrainer$playNote = _elm_lang$core$Native_Platform.outgoingPort(
	'playNote',
	function (v) {
		return {midiNumber: v.midiNumber};
	});
var _user$project$CallAnswerTrainer$playNoteCmdSelector = function (model) {
	var listGet = F2(
		function (index, list) {
			return (_elm_lang$core$Native_Utils.cmp(
				_elm_lang$core$List$length(list),
				index) > -1) ? _elm_lang$core$List$head(
				_elm_lang$core$List$reverse(
					A2(_elm_lang$core$List$take, index, list))) : _elm_lang$core$Maybe$Nothing;
		});
	var note = A2(listGet, model.beat + 1, model.challenge.solution);
	if (model.beating && (!model.muted)) {
		var _p0 = note;
		if (_p0.ctor === 'Nothing') {
			return _elm_lang$core$Platform_Cmd$none;
		} else {
			return _user$project$CallAnswerTrainer$playNote(_p0._0);
		}
	} else {
		return _elm_lang$core$Platform_Cmd$none;
	}
};
var _user$project$CallAnswerTrainer$melodyDone = _elm_lang$core$Native_Platform.incomingPort(
	'melodyDone',
	_elm_lang$core$Json_Decode$oneOf(
		{
			ctor: '::',
			_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string),
				_1: {ctor: '[]'}
			}
		}));
var _user$project$CallAnswerTrainer$Challenge = function (a) {
	return {solution: a};
};
var _user$project$CallAnswerTrainer$Model = F9(
	function (a, b, c, d, e, f, g, h, i) {
		return {time: a, challenge: b, numChallengesDone: c, meterProgress: d, showSolution: e, userStarted: f, beat: g, beating: h, muted: i};
	});
var _user$project$CallAnswerTrainer$ToggleMute = {ctor: 'ToggleMute'};
var _user$project$CallAnswerTrainer$StopMelody = {ctor: 'StopMelody'};
var _user$project$CallAnswerTrainer$Start = {ctor: 'Start'};
var _user$project$CallAnswerTrainer$startScreen = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$p,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'Play what you hear on your instrument.',
							A2(
								_elm_lang$core$Basics_ops['++'],
								' This is an exercise to link what',
								A2(_elm_lang$core$Basics_ops['++'], ' you hear in your head with how you', ' play your instrument.')))),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A3(
					_user$project$CallAnswerTrainer$materialButton,
					'Play',
					_user$project$CallAnswerTrainer$Start,
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$CallAnswerTrainer$ShowSolution = {ctor: 'ShowSolution'};
var _user$project$CallAnswerTrainer$NewChallenge = function (a) {
	return {ctor: 'NewChallenge', _0: a};
};
var _user$project$CallAnswerTrainer$generateChallengeCmd = A2(
	_elm_lang$core$Random$generate,
	function (_p1) {
		return _user$project$CallAnswerTrainer$NewChallenge(
			_user$project$CallAnswerTrainer$Challenge(_p1));
	},
	A3(_user$project$MusicNotes$diatonicMelodyGenerator, 4, 7, 3));
var _user$project$CallAnswerTrainer$init = {
	ctor: '_Tuple2',
	_0: {
		time: 0,
		challenge: _user$project$CallAnswerTrainer$Challenge(
			{
				ctor: '::',
				_0: A2(_user$project$MusicNotes$noteFromPitchClass, _user$project$MusicNotes$C, 1),
				_1: {ctor: '[]'}
			}),
		numChallengesDone: -1,
		meterProgress: 0,
		showSolution: false,
		userStarted: false,
		beat: 0,
		beating: false,
		muted: false
	},
	_1: _user$project$CallAnswerTrainer$generateChallengeCmd
};
var _user$project$CallAnswerTrainer$update = F2(
	function (msg, model) {
		var _p2 = msg;
		switch (_p2.ctor) {
			case 'MetTick':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							time: _p2._0,
							beat: model.beating ? A2(_elm_lang$core$Basics_ops['%'], model.beat + 1, 8) : model.beat
						}),
					_1: _user$project$CallAnswerTrainer$playNoteCmdSelector(model)
				};
			case 'GenerateChallenge':
				return {ctor: '_Tuple2', _0: model, _1: _user$project$CallAnswerTrainer$generateChallengeCmd};
			case 'NewChallenge':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{challenge: _p2._0, numChallengesDone: model.numChallengesDone + 1, showSolution: false, beat: 0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ShowSolution':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{showSolution: true}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Start':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{userStarted: true, beating: true}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'StopMelody':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$CallAnswerTrainer$stopMelody(
						{ctor: '_Tuple0'})
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{muted: !model.muted}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$CallAnswerTrainer$GenerateChallenge = {ctor: 'GenerateChallenge'};
var _user$project$CallAnswerTrainer$runningAppScreen = function (model) {
	var br = A2(
		_elm_lang$html$Html$br,
		{ctor: '[]'},
		{ctor: '[]'});
	var solution = function () {
		if (model.showSolution) {
			var noteDiv = function (note) {
				return A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'display', _1: 'inline'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '15px'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'font-size', _1: '3em'},
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							_user$project$MusicNotes$noteName(note)),
						_1: {ctor: '[]'}
					});
			};
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				A2(_elm_lang$core$List$map, noteDiv, model.challenge.solution));
		} else {
			return A3(
				_user$project$CallAnswerTrainer$materialButton,
				'Show Solution',
				_user$project$CallAnswerTrainer$ShowSolution,
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '10'},
					_1: {ctor: '[]'}
				});
		}
	}();
	var myH2 = function (s) {
		return A2(
			_elm_lang$html$Html$h2,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(s),
				_1: {ctor: '[]'}
			});
	};
	var score = myH2(
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(model.numChallengesDone),
			' Completed'));
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A3(
				_user$project$CallAnswerTrainer$materialButton,
				'Next Challenge',
				_user$project$CallAnswerTrainer$GenerateChallenge,
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10px'},
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: score,
				_1: {
					ctor: '::',
					_0: solution,
					_1: {
						ctor: '::',
						_0: br,
						_1: {
							ctor: '::',
							_0: br,
							_1: {
								ctor: '::',
								_0: br,
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$button,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onClick(_user$project$CallAnswerTrainer$ToggleMute),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('grey'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('btn'),
													_1: {ctor: '[]'}
												}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												model.muted ? 'Unmute' : 'Mute'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		});
};
var _user$project$CallAnswerTrainer$view = function (model) {
	var appWrapper = function (trans) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '15px'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '15px'},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: trans,
				_1: {ctor: '[]'}
			});
	};
	var pageWrapper = function (trans) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _user$project$CallAnswerTrainer$bodyStyle,
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: _user$project$CallAnswerTrainer$title,
				_1: {
					ctor: '::',
					_0: trans,
					_1: {ctor: '[]'}
				}
			});
	};
	var appContent = model.userStarted ? _user$project$CallAnswerTrainer$runningAppScreen(model) : _user$project$CallAnswerTrainer$startScreen(model);
	return pageWrapper(
		appWrapper(appContent));
};
var _user$project$CallAnswerTrainer$MetTick = function (a) {
	return {ctor: 'MetTick', _0: a};
};
var _user$project$CallAnswerTrainer$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: A2(_elm_lang$core$Time$every, 500 * _elm_lang$core$Time$millisecond, _user$project$CallAnswerTrainer$MetTick),
			_1: {ctor: '[]'}
		});
};
var _user$project$CallAnswerTrainer$main = _elm_lang$html$Html$program(
	{init: _user$project$CallAnswerTrainer$init, view: _user$project$CallAnswerTrainer$view, update: _user$project$CallAnswerTrainer$update, subscriptions: _user$project$CallAnswerTrainer$subscriptions})();
